package com.kmss.shop.services;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;


import com.kmss.shop.entities.Approval;
import com.kmss.shop.entities.Product;
import com.kmss.shop.exception.ResourseNotFoundException;
import com.kmss.shop.repositories.ApprovalRepository;
import com.kmss.shop.repositories.ProductRepository;

@Service
public class ProductService {
	@Autowired
	public ProductRepository productRepository;
	
	@Autowired
	public ApprovalRepository approvalRepository;
	
	
	public List<Product> ListAllActiveProduct() {
        return productRepository.findByApprovalsStatus("ACTIVE");
    }
	
	public ResponseEntity<String> createProduct(Product productRequest) {
        
        if (productRequest.getPrice() > 10000.0) {
            return ResponseEntity.badRequest().body("Price exceeds $10,000");
        }

        Product product = new Product();
        product.setName(productRequest.getName());
        product.setPrice(productRequest.getPrice());
        product.setPostedDate(productRequest.getPostedDate());
        
        if (productRequest.getPrice() > 5000.0) {
            Approval approval = new Approval();
            approval.setRequestDate(product.getPostedDate());
            approval.setStatus("Pending");
            approval.setProduct(product);
            product.getApprovals().add(approval);
        } else {
            Approval approval = new Approval();
            approval.setRequestDate(product.getPostedDate());
            approval.setStatus("Active");
            approval.setProduct(product);
            product.getApprovals().add(approval);
        }
        productRepository.save(product);

        return ResponseEntity.ok("Product created successfully");
    }
	
//	public List<Product> searchProducts(
//	        String productName, double minPrice, double maxPrice,
//	        LocalDateTime minPostedDate, LocalDateTime maxPostedDate
//	    ) {
//	        return productRepository.findByActiveTrueAndNameContainingAndPriceBetweenAndPostedDateBetween(
//	            productName, minPrice, maxPrice, minPostedDate, maxPostedDate
//	        );
//	    }
	
	public ResponseEntity<Product> getById(Long id)
	{
		Product product = productRepository.findById(id).orElseThrow(() -> new ResourseNotFoundException("Product With" + id +"not found"));
		return ResponseEntity.ok(product);
		
	}
	public ResponseEntity<Product> update(Long id, Product productDetails)
	{
		Product product = productRepository.findById(id).orElseThrow(() -> new ResourseNotFoundException("Product With" + id +"not found"));
		product.setName(productDetails.getName());
		product.setPrice(productDetails.getPrice());
		
		return ResponseEntity.ok(product);
		
	}
}
